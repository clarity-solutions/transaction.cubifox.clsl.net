{"version":3,"sources":["logo.svg","constants.ts","hooks/useContract.ts","hooks/useQuery.ts","components/InstallMetamaskView.tsx","components/WrongNetworkView.tsx","utils/ipfsURIToGatewayURI.ts","hooks/useMetadata.ts","hooks/useWeb3Provider.ts","components/ItemInfoTable.tsx","hooks/useItemOwnerAddress.ts","hooks/useWriteContractPageState.ts","components/buyerview/BuyerView.tsx","components/sellerview/ApproveButton.tsx","components/sellerview/PriceSelect.tsx","utils/weiPrice.ts","components/sellerview/SellButton.tsx","components/sellerview/SellerActionArea.tsx","components/sellerview/SellerView.tsx","WriteContractPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","CUBIFOX_MARKET_CONTRACT_ABI","CUBIFOX_TOKEN_CONTRACT_ABI","ContractContainer","createContainer","_useState","useState","_useState2","Object","slicedToArray","marketContract","setMarketContract","_useState3","_useState4","tokenContract","setTokenContract","linkMarketContract","useCallback","provider","signer","getSigner","contract","ethers","Contract","connect","err","linkTokenContract","contractWithSigner","useQuery","search","useLocation","query","useMemo","URLSearchParams","tradeID","parseInt","get","poster","itemID","price","InstallMetamaskView","react_default","a","createElement","Fragment","onClick","MetaMaskOnboarding","startOnboarding","WrongNetworkView","onChangeNetwork","window","ethereum","request","method","params","chainId","utils","hexValue","rpcUrls","chainName","nativeCurrency","name","symbol","decimals","blockExplorerUrls","ipfsURIToGatewayURI","_ref","ipfsURI","startsWith","NFT_STORAGE_IPFS_GATEWAY_URI","replace","MetadataContainer","status","setStatus","error","setError","_useState5","_useState6","metadata","setMetadata","fetchMetadata","asyncToGenerator","regenerator_default","mark","_callee","tokenURI","response","wrap","_context","prev","next","sent","fetch","ok","t0","json","t1","t2","text","t3","t4","console","log","message","finish","stop","_x","apply","this","arguments","Web3ProviderContainer","currentUserAddress","setCurrentUserAddress","checkMetamaskIsInstalled","isMetaMask","detectProvider","providers","Web3Provider","checkNetworkIsCorrect","currentNetwork","getNetwork","abrupt","getCurrentUser","_ref2","_callee2","accounts","_context2","send","_x2","ItemInfoTable","buyingState","sellingState","useContainer","itemOwnerAddress","_useQuery","setItemOwnerAddress","useEffect","_itemOwnerAddress","ownerOf","concat","useItemOwnerAddress","description","src","image","WriteContractPageStateContainer","preparingState","setPreparingState","userType","setUserType","setSellingState","_useState7","_useState8","setBuyingState","BuyerView","_WriteContractPageSta","onBuy","wei","tx","result","parseUnits","toString","executeTrade","value","wait","ItemInfoTable_ItemInfoTable","objectSpread","ApproveButton","approve","PriceSelect","unit","setPrice","setUnit","type","min","onChange","e","target","weiPrice","BigInt","Math","pow","SellButton","onSell","openTrade","disabled","SellerActionArea","className","ApproveButton_ApproveButton","PriceSelect_PriceSelect","SellButton_SellButton","SellerView","timer","setInterval","getApproved","clearInterval","SellerActionArea_SellerActionArea","WriteContractPage","_Web3ProviderContaine","_ContractContainer$us","_MetadataContainer$us","installed","then","InstallMetamaskView_InstallMetamaskView","WrongNetworkView_WrongNetworkView","BuyerView_BuyerView","SellerView_SellerView","App","react_router_dom","Provider","logo","alt","WriteContractPage_WriteContractPage","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.cd7891f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","export const CUBIFOX_MARKET_CONTRACT_ADDRESS =\n  \"0xa55E0A9F4DB29c03EfAb9D063B03309b73Cf32AA\";\n\nexport const CUBIFOX_MARKET_CONTRACT_ABI = [\n  \"function tradeIdCounter() view returns (uint256)\",\n  \"function openTrade(uint256 _itemId, uint256 _price)\",\n  \"function executeTrade(uint256 _tradeId) payable\",\n];\n\nexport const CUBIFOX_TOKEN_CONTRACT_ADDRESS =\n  \"0x9967a309fce3De66A70704431338a3d086509732\";\n\nexport const CUBIFOX_TOKEN_CONTRACT_ABI = [\n  \"function approve(address to, uint256 tokenId)\",\n  \"function getApproved(uint256 tokenId) view returns (address operator)\",\n  \"function tokenURI(uint256 tokenId) public view returns (string memory)\",\n  \"function ownerOf(uint256 tokenId) public view returns (address)\",\n];\n","import { useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { createContainer } from \"unstated-next\";\nimport {\n  CUBIFOX_MARKET_CONTRACT_ADDRESS,\n  CUBIFOX_MARKET_CONTRACT_ABI,\n  CUBIFOX_TOKEN_CONTRACT_ADDRESS,\n  CUBIFOX_TOKEN_CONTRACT_ABI,\n} from \"../constants\";\n\nconst useContract = () => {\n  const [marketContract, setMarketContract] = useState<ethers.Contract>();\n  const [tokenContract, setTokenContract] = useState<ethers.Contract>();\n\n  const linkMarketContract = useCallback(\n    (provider: ethers.providers.Web3Provider) => {\n      try {\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CUBIFOX_MARKET_CONTRACT_ADDRESS,\n          CUBIFOX_MARKET_CONTRACT_ABI,\n          provider\n        );\n        setMarketContract(contract.connect(signer));\n      } catch (err) {\n        throw err;\n      }\n    },\n    [setMarketContract]\n  );\n\n  const linkTokenContract = useCallback(\n    (provider: ethers.providers.Web3Provider) => {\n      try {\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CUBIFOX_TOKEN_CONTRACT_ADDRESS,\n          CUBIFOX_TOKEN_CONTRACT_ABI,\n          provider\n        );\n        const contractWithSigner = contract.connect(signer);\n        setTokenContract(contractWithSigner);\n        return contractWithSigner;\n      } catch (err) {\n        throw err;\n      }\n    },\n    [setTokenContract]\n  );\n\n  return {\n    marketContract,\n    tokenContract,\n    linkMarketContract,\n    linkTokenContract,\n  };\n};\n\nexport const ContractContainer = createContainer(useContract);\n","import { useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// [期待するqueryStringのパラメーター]\n// * Userが Seller の時\n//   - itemID\n// * Userが Buyer の時\n//   - tradeID\n//   - poster\n//   - itemID\n//   - price\nexport const useQuery = () => {\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n\n  return {\n    tradeID: parseInt(query.get(\"tradeID\")!),\n    poster: query.get(\"poster\")!,\n    itemID: parseInt(query.get(\"itemID\")!),\n    price: parseInt(query.get(\"price\")!),\n  };\n};\n","import React from \"react\";\nimport MetaMaskOnboarding from \"@metamask/onboarding\";\n\nexport const InstallMetamaskView = () => {\n  return (\n    <>\n      <p>\n        Click here to install MetaMask!\n        <br />\n        If you complete to install Metamask, please reload this window.\n      </p>\n      <button\n        onClick={() => {\n          const onboarding = new MetaMaskOnboarding();\n          onboarding.startOnboarding();\n        }}\n      >\n        Install Metamask\n      </button>\n    </>\n  );\n};\n","import { ethers } from \"ethers\";\nimport React, { useCallback } from \"react\";\n\nexport const WrongNetworkView = () => {\n  // change network to polygon (mumbai)\n  // TODO: 環境変数からネットワーク情報を渡す\n  const onChangeNetwork = useCallback(() => {\n    window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: ethers.utils.hexValue(80001),\n          rpcUrls: [\"https://rpc-mumbai.matic.today\"],\n          chainName: \"Mumbai\",\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n        },\n      ],\n    });\n  }, []);\n\n  return (\n    <>\n      <p>\n        The network is not collect. Please connect to Mumbai (polygon test)\n        network.\n        <br />\n        If you complete to change the network, please reload this window.\n      </p>\n      <button onClick={onChangeNetwork}>Change Network</button>\n    </>\n  );\n};\n","const NFT_STORAGE_IPFS_GATEWAY_URI = \"https://nftstorage.link\";\n\nexport const ipfsURIToGatewayURI = ({ ipfsURI }: { ipfsURI: string }) => {\n  if (ipfsURI.startsWith(\"https\")) {\n    return ipfsURI;\n  }\n  const uri =\n    NFT_STORAGE_IPFS_GATEWAY_URI + \"/ipfs/\" + ipfsURI.replace(\"ipfs://\", \"\");\n  return uri;\n};\n","import { useState, useCallback } from \"react\";\nimport { Metadata } from \"../types/Metadata\";\nimport { ipfsURIToGatewayURI } from \"../utils/ipfsURIToGatewayURI\";\nimport { useQuery } from \"./useQuery\";\nimport { ethers } from \"ethers\";\nimport { createContainer } from \"unstated-next\";\n\ntype Status = \"init\" | \"requesting\" | \"done\";\n\nconst useMetadata = () => {\n  const { itemID } = useQuery();\n  const [status, setStatus] = useState<Status>(\"init\");\n  const [error, setError] = useState<string | null>(null);\n  const [metadata, setMetadata] = useState<Metadata>();\n\n  const fetchMetadata = useCallback(\n    async (tokenContract: ethers.Contract) => {\n      setError(null);\n      setStatus(\"requesting\");\n      try {\n        const tokenURI = await tokenContract.tokenURI(itemID);\n        const response = await fetch(\n          ipfsURIToGatewayURI({ ipfsURI: tokenURI })\n        );\n        if (response.ok) {\n          setMetadata(await response.json());\n        } else {\n          setError(await response.text());\n        }\n      } catch (err) {\n        console.log(\"err\", err);\n        setError((err as Error).message);\n      } finally {\n        setStatus(\"done\");\n      }\n    },\n    [itemID]\n  );\n  return { metadata, fetchMetadata, status, error };\n};\n\nexport const MetadataContainer = createContainer(useMetadata);\n","import { ethers } from \"ethers\";\nimport { useState, useCallback } from \"react\";\nimport { createContainer } from \"unstated-next\";\n\nconst useProvider = () => {\n  const [currentUserAddress, setCurrentUserAddress] = useState<String>();\n\n  const checkMetamaskIsInstalled = useCallback(() => {\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      return false;\n    }\n    return true;\n  }, [window.ethereum, window.ethereum.isMetaMask]);\n\n  const detectProvider = useCallback(() => {\n    return new ethers.providers.Web3Provider(window.ethereum!);\n  }, []);\n\n  const checkNetworkIsCorrect = useCallback(\n    async (provider: ethers.providers.Web3Provider) => {\n      const currentNetwork = await provider.getNetwork();\n      return currentNetwork.chainId == 80001;\n    },\n    []\n  );\n\n  const getCurrentUser = useCallback(\n    async (provider: ethers.providers.Web3Provider) => {\n      const accounts = await provider.send(\"eth_requestAccounts\", []);\n      setCurrentUserAddress(accounts[0]);\n    },\n    [setCurrentUserAddress]\n  );\n\n  return {\n    currentUserAddress,\n    checkMetamaskIsInstalled,\n    detectProvider,\n    checkNetworkIsCorrect,\n    getCurrentUser,\n  };\n};\n\nexport const Web3ProviderContainer = createContainer(useProvider);\n","import React from \"react\";\nimport { useItemOwnerAddress } from \"../hooks/useItemOwnerAddress\";\nimport { MetadataContainer } from \"../hooks/useMetadata\";\nimport { useQuery } from \"../hooks/useQuery\";\nimport { BuyingState } from \"../types/BuyingState\";\nimport { SellingState } from \"../types/SellingState\";\nimport { ipfsURIToGatewayURI } from \"../utils/ipfsURIToGatewayURI\";\nimport { Web3ProviderContainer } from \"../hooks/useWeb3Provider\";\n\nexport const ItemInfoTable = ({\n  buyingState,\n  sellingState,\n}: {\n  buyingState?: BuyingState;\n  sellingState?: SellingState;\n}) => {\n  const { price } = useQuery();\n  const { currentUserAddress } = Web3ProviderContainer.useContainer();\n  const { metadata } = MetadataContainer.useContainer();\n  const itemOwnerAddress = useItemOwnerAddress({\n    sellingState,\n    buyingState,\n  });\n\n  if (!metadata) return null;\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>Your Address</th>\n          <td>{currentUserAddress}</td>\n        </tr>\n        <tr>\n          <th>Item Name</th>\n          <td>{metadata.name}</td>\n        </tr>\n        <tr>\n          <th>Item Description</th>\n          <td>{metadata.description}</td>\n        </tr>\n        <tr>\n          <th>Item Image</th>\n          <td>\n            <img src={ipfsURIToGatewayURI({ ipfsURI: metadata.image })} />\n          </td>\n        </tr>\n        <tr>\n          <th>Current Owner</th>\n          <td>{itemOwnerAddress}</td>\n        </tr>\n        {price ? (\n          <tr>\n            <th>Price</th>\n            <td>{price} Wei MATIC</td>\n          </tr>\n        ) : (\n          <></>\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { BuyingState } from \"../types/BuyingState\";\nimport { SellingState } from \"../types/SellingState\";\nimport { useQuery } from \"./useQuery\";\nimport { ContractContainer } from \"./useContract\";\nimport { CUBIFOX_MARKET_CONTRACT_ADDRESS } from \"../constants\";\n\n// useItemOwnerAddress() は状況に応じた itemOwnerAddress を返す\n//\n// [BuyerViewの場合]\n// 1. 基本は trade.poster (queryString から取得した poster)\n// 2. buyingState が \"success\" になったときは tokenContract.ownerOf で再取得した値\n//\n// [SellerViewの場合]\n// 1. 基本は tokenContract.ownerOf で取得した値\n// 2. sellingState が \"success\" の時は \"Cubifox Market\"\nexport const useItemOwnerAddress = ({\n  buyingState,\n  sellingState,\n}: {\n  buyingState?: BuyingState;\n  sellingState?: SellingState;\n}) => {\n  const { poster, itemID } = useQuery();\n  const { tokenContract } = ContractContainer.useContainer();\n  const [itemOwnerAddress, setItemOwnerAddress] = useState<String>();\n\n  useEffect(() => {\n    if (!tokenContract) return;\n\n    // [BuyerViewの場合]の1\n    if (buyingState && buyingState != \"success\") {\n      setItemOwnerAddress(poster);\n      return;\n    }\n\n    // [SellerView場合]の2\n    if (sellingState == \"success\") {\n      setItemOwnerAddress(\n        `Cubifox Market (${CUBIFOX_MARKET_CONTRACT_ADDRESS})`\n      );\n      return;\n    }\n\n    // [BuyerViewの場合]の2 と [SellerView場合]の1\n    (async () => {\n      try {\n        const itemOwnerAddress = await tokenContract.ownerOf(itemID);\n\n        setItemOwnerAddress(itemOwnerAddress);\n      } catch (err) {\n        console.log(\"err\", err);\n      }\n    })();\n  }, [tokenContract, buyingState, sellingState]);\n  return itemOwnerAddress;\n};\n","import { useState } from \"react\";\nimport { BuyingState } from \"../types/BuyingState\";\nimport { PreparingState } from \"../types/PreparingState\";\nimport { SellingState } from \"../types/SellingState\";\nimport { UserType } from \"../types/UserType\";\nimport { createContainer } from \"unstated-next\";\n\nconst useWriteContractPageState = () => {\n  const [preparingState, setPreparingState] = useState<PreparingState>(\n    \"checkingMetamask\"\n  );\n  const [userType, setUserType] = useState<UserType>();\n  const [sellingState, setSellingState] = useState<SellingState>();\n  const [buyingState, setBuyingState] = useState<BuyingState>();\n\n  return {\n    preparingState,\n    setPreparingState,\n    userType,\n    setUserType,\n    sellingState,\n    setSellingState,\n    buyingState,\n    setBuyingState,\n  };\n};\n\nexport const WriteContractPageStateContainer = createContainer(\n  useWriteContractPageState\n);\n","import React, { useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ItemInfoTable } from \"../ItemInfoTable\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { ContractContainer } from \"../../hooks/useContract\";\nimport { WriteContractPageStateContainer } from \"../../hooks/useWriteContractPageState\";\n\nexport const BuyerView = () => {\n  const { tradeID, price } = useQuery();\n  const { marketContract } = ContractContainer.useContainer();\n  const {\n    buyingState,\n    setBuyingState,\n  } = WriteContractPageStateContainer.useContainer();\n\n  useEffect(() => {\n    setBuyingState(\"init\");\n  }, []);\n\n  const onBuy = useCallback(\n    async ({ tradeID, price }: { tradeID: number; price: number }) => {\n      setBuyingState(\"executing\");\n      try {\n        const wei = ethers.utils.parseUnits(price.toString(), \"wei\");\n        console.log(\"price: \", wei);\n        const tx: ethers.providers.TransactionResponse = await marketContract!.executeTrade(\n          tradeID,\n          { value: wei }\n        );\n        console.log({ tx });\n        const result = await tx.wait();\n        if (result.status == 1) {\n          console.log(\"Done!\");\n          setBuyingState(\"success\");\n        } else {\n          // 失敗するトランザクションは metamask 実行前にはじかれるはずなのでここは通らないかもしれない\n          console.log(\"failure [result]:\", result);\n          setBuyingState(\"failure\");\n        }\n      } catch (err) {\n        console.log(err);\n        setBuyingState(\"failure\");\n      }\n    },\n    []\n  );\n\n  return (\n    <>\n      <p>Buy a collectible</p>\n\n      <ItemInfoTable buyingState={buyingState} />\n\n      {buyingState == \"success\" ? (\n        <>Done</>\n      ) : buyingState == \"executing\" ? (\n        <>sending transaction ...</>\n      ) : (\n        <button onClick={() => onBuy({ ...{ tradeID, price } })}>\n          Buy Item\n        </button>\n      )}\n    </>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { ContractContainer } from \"../../hooks/useContract\";\nimport { ethers } from \"ethers\";\nimport { WriteContractPageStateContainer } from \"../../hooks/useWriteContractPageState\";\nimport { CUBIFOX_MARKET_CONTRACT_ADDRESS } from \"../../constants\";\n\n// Contract に ERC721トークン を transfer するために approve してもらう必要がある\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC721/IERC721.sol#L61-L79\nexport const ApproveButton = () => {\n  const { itemID } = useQuery();\n  const { tokenContract } = ContractContainer.useContainer();\n  const { setSellingState } = WriteContractPageStateContainer.useContainer();\n  const onClick = useCallback(\n    async ({ itemID }: { itemID: number }) => {\n      setSellingState(\"givingPermission\");\n      try {\n        const tx: ethers.providers.TransactionResponse = await tokenContract!.approve(\n          CUBIFOX_MARKET_CONTRACT_ADDRESS,\n          itemID\n        );\n        const result = await tx.wait();\n        if (result.status == 1) {\n          setSellingState(\"permitted\");\n        } else {\n          // 失敗するトランザクションは metamask 実行前にはじかれるはずなのでここは通らないかもしれない\n          setSellingState(\"failure\");\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [tokenContract]\n  );\n\n  return <button onClick={() => onClick({ itemID })}>Give Permission</button>;\n};\n","import React, { ChangeEvent } from \"react\";\nimport { MaticUnit } from \"../../types/MaticUnit\";\n\nexport const PriceSelect = ({\n  price,\n  unit,\n  setPrice,\n  setUnit,\n}: {\n  price: number;\n  unit: MaticUnit;\n  setPrice: React.Dispatch<React.SetStateAction<number>>;\n  setUnit: React.Dispatch<React.SetStateAction<MaticUnit>>;\n}) => {\n  return (\n    <span>\n      <label>price</label>\n      <input\n        type=\"number\"\n        min=\"0\"\n        value={price}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setPrice(parseInt(e.target.value));\n        }}\n      />\n      <select\n        value={unit}\n        onChange={(e) => {\n          setUnit(e.target.value as MaticUnit);\n        }}\n      >\n        <option value=\"weiMatic\">wei MATIC</option>\n        <option value=\"gweiMatic\">gwei MATIC</option>\n        <option value=\"matic\">MATIC</option>\n      </select>\n    </span>\n  );\n};\n","import { MaticUnit } from \"../types/MaticUnit\";\n\nexport const weiPrice = ({\n  price,\n  unit,\n}: {\n  price: number;\n  unit: MaticUnit;\n}): BigInt => {\n  if (unit == \"weiMatic\") {\n    return BigInt(price);\n  } else if (unit == \"gweiMatic\") {\n    return BigInt(price * 10 ** 9);\n  } else {\n    return BigInt(price * 10 ** 18);\n  }\n};\n","import React, { useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { weiPrice } from \"../../utils/weiPrice\";\nimport { MaticUnit } from \"../../types/MaticUnit\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { ContractContainer } from \"../../hooks/useContract\";\nimport { WriteContractPageStateContainer } from \"../../hooks/useWriteContractPageState\";\n\nexport const SellButton = ({\n  price,\n  unit,\n}: {\n  price: number;\n  unit: MaticUnit;\n}) => {\n  const { itemID } = useQuery();\n  const { marketContract } = ContractContainer.useContainer();\n  const { setSellingState } = WriteContractPageStateContainer.useContainer();\n\n  const onSell = useCallback(async () => {\n    try {\n      setSellingState(\"executing\");\n      const wei = ethers.utils.parseUnits(\n        weiPrice({ price: price, unit: unit }).toString(),\n        \"wei\"\n      );\n      const tx: ethers.providers.TransactionResponse = await marketContract!.openTrade(\n        itemID,\n        wei\n      );\n      const result = await tx.wait();\n      if (result.status == 1) {\n        setSellingState(\"success\");\n      } else {\n        // 失敗するトランザクションは metamask 実行前にはじかれるはずなのでここは通らないかもしれない\n        setSellingState(\"failure\");\n      }\n    } catch (err) {\n      console.log(err);\n      setSellingState(\"failure\");\n    }\n  }, [marketContract, price]);\n\n  if (price >= 0) return <button onClick={onSell}>Sell</button>;\n\n  return <button disabled>Sell</button>;\n};\n","import React, { useState } from \"react\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { ContractContainer } from \"../../hooks/useContract\";\nimport { MaticUnit } from \"../../types/MaticUnit\";\nimport { SellingState } from \"../../types/SellingState\";\nimport { ApproveButton } from \"./ApproveButton\";\nimport { PriceSelect } from \"./PriceSelect\";\nimport { SellButton } from \"./SellButton\";\nimport { WriteContractPageStateContainer } from \"../../hooks/useWriteContractPageState\";\n\nexport const SellerActionArea = () => {\n  const { itemID } = useQuery();\n  const { tokenContract } = ContractContainer.useContainer();\n  const [price, setPrice] = useState<number>(0);\n  const [unit, setUnit] = useState<MaticUnit>(\"weiMatic\");\n  const {\n    sellingState,\n    setSellingState,\n  } = WriteContractPageStateContainer.useContainer();\n\n  if (sellingState == \"init\")\n    return (\n      <>\n        <p className=\"description\">\n          CubifoxMarket needs a permission of keeping your collectible.\n          <br />\n          Until the item sold, you can cancel listing the item anytime and then\n          the item will be returned to you.\n        </p>\n        <ApproveButton />\n      </>\n    );\n\n  if (sellingState == \"givingPermission\" || sellingState == \"executing\")\n    return (\n      <p>\n        Sending a transaction. It will take few minutes. Please don't reload\n        this window.\n      </p>\n    );\n\n  if (sellingState == \"permitted\")\n    return (\n      <>\n        <PriceSelect {...{ price, unit, setPrice, setUnit }} />\n        <SellButton price={price} unit={unit} />\n      </>\n    );\n\n  if (sellingState == \"success\")\n    return (\n      <p>\n        Your item is successfully listed for sell. You can back to CubifoxMarket\n        App.\n      </p>\n    );\n\n  if (sellingState == \"failure\") return <p>Error is occurred.</p>;\n\n  return null;\n};\n","import React, { useEffect } from \"react\";\nimport { ItemInfoTable } from \"../ItemInfoTable\";\nimport { SellerActionArea } from \"./SellerActionArea\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { ContractContainer } from \"../../hooks/useContract\";\nimport { WriteContractPageStateContainer } from \"../../hooks/useWriteContractPageState\";\nimport { CUBIFOX_MARKET_CONTRACT_ADDRESS } from \"../../constants\";\n\nexport const SellerView = () => {\n  const { itemID } = useQuery();\n  const { tokenContract } = ContractContainer.useContainer();\n  const {\n    sellingState,\n    setSellingState,\n  } = WriteContractPageStateContainer.useContainer();\n\n  useEffect(() => {\n    setSellingState(\"init\");\n  }, []);\n\n  // sellingState が givingPermission の時 tokenContract.getApproved() を3秒ごとに実行する\n  useEffect(() => {\n    if (!tokenContract) return;\n    if (sellingState != \"givingPermission\") return;\n\n    const timer = setInterval(async () => {\n      try {\n        const approvedOperator = await tokenContract.getApproved(itemID);\n        if (approvedOperator == CUBIFOX_MARKET_CONTRACT_ADDRESS) {\n          setSellingState(\"permitted\");\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }, 3000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [tokenContract, sellingState]);\n\n  return (\n    <>\n      <p>List your collectible</p>\n\n      <ItemInfoTable sellingState={sellingState} />\n\n      <SellerActionArea />\n    </>\n  );\n};\n","import \"./WriteContractPage.css\";\nimport React, { useEffect } from \"react\";\n\nimport { ContractContainer } from \"./hooks/useContract\";\nimport { useQuery } from \"./hooks/useQuery\";\nimport { InstallMetamaskView } from \"./components/InstallMetamaskView\";\nimport { WrongNetworkView } from \"./components/WrongNetworkView\";\nimport { BuyerView } from \"./components/buyerview/BuyerView\";\nimport { SellerView } from \"./components/sellerview/SellerView\";\nimport { WriteContractPageStateContainer } from \"./hooks/useWriteContractPageState\";\nimport { Web3ProviderContainer } from \"./hooks/useWeb3Provider\";\nimport { MetadataContainer } from \"./hooks/useMetadata\";\n\nexport const WriteContractPage = () => {\n  const { tradeID } = useQuery();\n  const {\n    userType,\n    setUserType,\n    preparingState,\n    buyingState,\n    sellingState,\n    setPreparingState,\n  } = WriteContractPageStateContainer.useContainer();\n  const {\n    checkMetamaskIsInstalled,\n    detectProvider,\n    checkNetworkIsCorrect,\n    getCurrentUser,\n  } = Web3ProviderContainer.useContainer();\n  const {\n    linkMarketContract,\n    linkTokenContract,\n  } = ContractContainer.useContainer();\n  const { fetchMetadata, metadata } = MetadataContainer.useContainer();\n\n  // 今の状態を確認するためだけの useEffect\n  useEffect(() => {\n    console.log({ preparingState, buyingState, sellingState, metadata });\n  }, [preparingState, buyingState, sellingState]);\n\n  // Write Contract するための準備\n  useEffect(() => {\n    const installed = checkMetamaskIsInstalled();\n    installed\n      ? setPreparingState(\"detectingProvider\")\n      : setPreparingState(\"noMetamask\");\n\n    const provider = detectProvider();\n    if (!provider) return;\n\n    setPreparingState(\"checkingNetwork\");\n\n    const collectNetwork = checkNetworkIsCorrect(provider);\n    if (!collectNetwork) {\n      setPreparingState(\"wrongNetwork\");\n      return;\n    }\n\n    void getCurrentUser(provider);\n    linkMarketContract(provider);\n    const tokenContract = linkTokenContract(provider);\n\n    setPreparingState(\"gettingMetadata\");\n    void fetchMetadata(tokenContract).then(() => {\n      setPreparingState(\"ready\");\n    });\n  }, []);\n\n  // setUserType する\n  useEffect(() => {\n    if (tradeID) {\n      setUserType(\"buyer\");\n    } else {\n      setUserType(\"seller\");\n    }\n  }, [tradeID]);\n\n  if (preparingState == \"noMetamask\") return <InstallMetamaskView />;\n  if (preparingState == \"wrongNetwork\") return <WrongNetworkView />;\n  if (preparingState == \"ready\" && userType == \"buyer\") return <BuyerView />;\n  if (preparingState == \"ready\" && userType == \"seller\") return <SellerView />;\n\n  return null;\n};\n","import { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport React from \"react\";\nimport { WriteContractPage } from \"./WriteContractPage\";\nimport { MetadataContainer } from \"./hooks/useMetadata\";\nimport { Web3ProviderContainer } from \"./hooks/useWeb3Provider\";\nimport { ContractContainer } from \"./hooks/useContract\";\nimport { WriteContractPageStateContainer } from \"./hooks/useWriteContractPageState\";\n\nfunction App() {\n  return (\n    <Router>\n      <WriteContractPageStateContainer.Provider>\n        <Web3ProviderContainer.Provider>\n          <ContractContainer.Provider>\n            <MetadataContainer.Provider>\n              <div className=\"App\">\n                <header className=\"App-header\">\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                  <WriteContractPage />\n                </header>\n              </div>\n            </MetadataContainer.Provider>\n          </ContractContainer.Provider>\n        </Web3ProviderContainer.Provider>\n      </WriteContractPageStateContainer.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}